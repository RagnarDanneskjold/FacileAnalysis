% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fdge.R, R/fdge-compare.R, R/fdge-interact.R
\name{fdge}
\alias{fdge}
\alias{fdge.FacileAnovaModelDefinition}
\alias{fdge.FacileTtestDGEModelDefinition}
\alias{fdge.FacileLinearModelDefinition}
\alias{compare.FacileTtestAnalysisResult}
\alias{report.FacileTtestAnalysisResult}
\title{Peform a differential expression analysis.}
\usage{
fdge(
  x,
  assay_name = NULL,
  method = NULL,
  features = NULL,
  filter = "default",
  with_sample_weights = FALSE,
  ...,
  verbose = FALSE
)

\method{fdge}{FacileAnovaModelDefinition}(
  x,
  assay_name = NULL,
  method = NULL,
  features = NULL,
  filter = "default",
  with_sample_weights = FALSE,
  ...,
  verbose = FALSE
)

\method{fdge}{FacileTtestDGEModelDefinition}(
  x,
  assay_name = NULL,
  method = NULL,
  features = NULL,
  filter = "default",
  with_sample_weights = FALSE,
  treat_lfc = NULL,
  ...,
  verbose = FALSE
)

\method{fdge}{FacileLinearModelDefinition}(
  x,
  assay_name = NULL,
  method = NULL,
  features = NULL,
  filter = "default",
  with_sample_weights = FALSE,
  treat_lfc = NULL,
  weights = NULL,
  with_box = FALSE,
  ...,
  trend.eBayes = FALSE,
  robust.eBayes = FALSE,
  verbose = FALSE
)

\method{compare}{FacileTtestAnalysisResult}(x, y, treat_lfc = NULL, rerun = TRUE, ...)

\method{report}{FacileTtestAnalysisResult}(
  x,
  type = c("dge", "features"),
  ntop = 200,
  max_padj = 0.1,
  min_logFC = 1,
  features = NULL,
  highlight = NULL,
  round_digits = 3,
  event_source = "A",
  webgl = TRUE,
  caption = NULL,
  ...
)
}
\arguments{
\item{x}{a data source}

\item{assay_name}{the name of the assay that holds the measurements for test.
Defaults to \code{default_assay(x)}.}

\item{method}{The differential testing framework to use over the data. The
valid choices are defined by the type of assay \code{assay_name}is. Refer to the
\emph{Differential Expression Testing Methods} section for more details.}

\item{features}{Explicitly request the features to test. If this is provided,
then the \code{filter} criteria (to remove low abundance features, for instance)
is skipped. By default this is \code{NULL}}

\item{filter, with_sample_weights}{Passed into \code{\link[=biocbox]{biocbox()}} to determine which
features (genes) are removed from the dataset for testing, as well as if
to use \code{\link[limma:arrayWeights]{limma::arrayWeights()}} or \code{\link[limma:voomWithQualityWeights]{limma::voomWithQualityWeights()}}
(where appropriate) when testing (default is not to).}

\item{...}{passed down into inner methods, such as \code{biocbox} to tweak
filtering criteria, for instance}

\item{weights}{a \verb{sample_id,feature_id,weight} table of observation weights
to use when \code{method == "limma"}.}

\item{rerun}{When comparing two results, the features analyzed in each may
differ, making comparisons between the two objects sparse, at times.
When \code{rerun = TRUE} (default), the original linear models are rerun with
their features set to \code{union(features(x), features(y))}.}
}
\description{
Use \code{\link[=flm_def]{flm_def()}} to define the design matrix and contrast to test and
pass the \code{FacileLinearModelDefinition} object returned from that to \code{fdge()}
to run the desired differential testing framework (dictated by the \code{method}
parameter) over the data. \code{flm_def} accepts a
}
\section{Differential Expression Testing Methods}{

The appropriate statistical framework to use for differential expression
testing is defined by the type of data that is recorded in the assay
\code{assay_name}, ie. \code{assay_info(x, assay_name)$assay_type}.

The \code{fdge_methods()} function returns a tibble of appropriate
\code{assay_type -> dge_method} associations. The first entry for each
\code{dge_method} is the default \code{method} used if one isn't provided by the
caller.

The available methods are:
\itemize{
\item \code{"voom"}: For count data, uses \code{\link[limma:voomWithQualityWeights]{limma::voomWithQualityWeights()}} when
\code{with_sample_weights = TRUE}.
\item \code{"edgeR-qlf"}: The edgeR quasi-likelihood method, for count data.
\item \code{"limma-trend"}: Usable for log-transformed data that "looks like" it came
from count data, or where there is a "trend" of the variance with the
mean, uses  \code{\link[limma:arrayWeights]{limma::arrayWeights()}} when \code{with_sample_weights = TRUE}.
\item \code{"limma"}: Straightup limma, this expects log2-normal like data, with
(largely) no trend of the variance to the mean worth modeling. Uses
\code{\link[limma:arrayWeights]{limma::arrayWeights()}} when \code{with_sample_weights = TRUE}
}
}

\section{Feature Filtering Strategy}{

You will almost always want to filter out lowly abundant features before
performing differential expression analysis. You can either do this by
explicitly requesting which features to test via the \code{features} parameter,
or by setting \verb{filter = "default}.

When \code{filter == "default"}, the filtering strategy is largely based on the
logic found in \code{\link[edgeR:filterByExpr]{edgeR::filterByExpr()}}.

When \code{fdge} analysis is performed on count data, the filtering is precisely
executed using this function, using \code{design(x)} as the design parameter to
\code{filterByExpr}. You can modify the filtering behavior by passing any
named parameters found in the \code{\link[edgeR:filterByExpr]{edgeR::filterByExpr()}} function down to it via
\code{fdge}'s \code{...} parameter (don't pass \code{design}, as this is already defined).

There are times when you want to tweak this behavior in ways that aren't
exactly supported by \code{filterByExpr}. You can pass in a "feature descriptor"
(a character vector of feature ids, or a data.frame with a "feature_id"
column) into the following parameters:
\itemize{
\item \code{filter_universe}: The features enumerated in this parameter will restrict
the universe of features that can potentially be included in the downstream
analysis. The \code{filterByExpr()} logic will happen downstream of this
universe. The default value is \code{NULL}, which specifies the universe of
features to be all of the ones measured using this assay.
\item \code{filter_require}: The \code{filterByExpr} logic happens first on the universe
of features as parameterized. All features enumerated here will be forcibly
included in the analysis, irrespective of whether they would have passed
the perscribed filter criteria or not. The defalut value for this argument
is \code{NULL}, which means no genes are forcibly included in the analysis when
they do not pass muster given the filtering criteria.
}
}

\section{Comapring DGE Results}{

We can compare two Ttest results.

The filtering strategy in the interaction model dictates that the union
of all features found in \code{x} are \code{y} are used in the test.
}

\section{Interacting with results}{


The \code{report} function will create an htmlwidget which can be explored by
the analyst or dropped into an Rmarkdown report.

\code{report(result, "dge", max_padj = 0.05, min_logFC = 1)} will create a
side-by-side volcano and datatable for differential expression results.
}

\examples{
efds <- FacileData::exampleFacileDataSet()
samples <- efds \%>\%
  FacileData::filter_samples(indication == "BLCA") \%>\%
  dplyr::mutate(something = sample(c("a", "b"), nrow(.), replace = TRUE))
mdef <- flm_def(samples, covariate = "sample_type",
                numer = "tumor", denom = "normal",
                batch = "sex")
dge <- fdge(mdef, method = "voom")
if (interactive()) {
  viz(dge)
  viz(dge, "146909")
  shine(dge)
}
dge.stats <- tidy(dge)
dge.sig <- signature(dge)

stage.anova <- samples \%>\%
  flm_def(covariate = "stage", batch = "sex") \%>\%
  fdge(method = "voom")
anova.sig <- signature(stage.anova)
# Comparing two T-test results ----------------------------------------------
# Let's compare the tumor vs normal DGE results in CRC vs BLCA

efds <- FacileData::exampleFacileDataSet()
dge.crc <- FacileData::filter_samples(efds, indication == "CRC") \%>\%
  flm_def("sample_type", "tumor", "normal", "sex") \%>\%
  fdge()
dge.blca <- FacileData::filter_samples(efds, indication == "BLCA") \%>\%
  flm_def("sample_type", "tumor", "normal", "sex") \%>\%
  fdge()
dge.comp <- compare(dge.crc, dge.blca)
if (interactive()) {
  viz(dge.comp, xlabel = "logFC(CRC)", ylabel = "logFC(BLCA)",
      highlight = head(tidy(signature(dge.comp)), 5))
  report(dge.comp)
  shine(dge.comp)
}
}
