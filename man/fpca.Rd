% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fpca.R
\name{fpca}
\alias{fpca}
\alias{fpca.facile_frame}
\alias{fpca.matrix}
\title{Runs a facile PCA}
\usage{
fpca(x, pcs = 5, ntop = 500, row_covariates = NULL,
  col_covariates = NULL, ...)

\method{fpca}{facile_frame}(x, pcs = 5, ntop = 500,
  row_covariates = NULL, col_covariates = NULL, assay_name = NULL,
  custom_key = Sys.getenv("USER"), ...)

\method{fpca}{matrix}(x, pcs = 5, ntop = 500, row_covariates = NULL,
  col_covariates = NULL, use_irlba = pcs < 7, ...)
}
\arguments{
\item{x}{a data container}
}
\value{
an fpca result
}
\description{
The code here is largely inspired by DESeq2's plotPCA.
}
\details{
You should look at factominer:
\itemize{
\item http://factominer.free.fr/factomethods/index.html
\item http://factominer.free.fr/graphs/factoshiny.html
}
}
\section{Teaching and Tutorials}{


This looks like a useful tutorial to use when explaining the utility of
PCA analysis:
http://alexhwilliams.info/itsneuronalblog/2016/03/27/pca/
}

\section{FacileDataStore (facile_frame)}{

We enable the user to supply extra sample covariates that are not found
in the FacileDataStore associated with these samples \code{x} by adding them as
extra columns to \code{x}.

If manually provioded col_covariates have the same name as internal sample
covariates, then the manually provided ones will supersede the internals.
}

\examples{
efds <- FacileData::exampleFacileDataSet()

# A subset of samples ------------------------------------------------------
pca.crc <- efds \%>\%
  FacileData::filter_samples(indication == "CRC") \%>\%
  fpca()
if (interactive()) {
  report(pca.crc, color_aes = "sample_type")
}

pca.gdb <- pca.crc \%>\%
  signature(pcs = 1:3) \%>\%
  result() \%>\%
  multiGSEA::GeneSetDb()

# All samples --------------------------------------------------------------
pca.all <- fpca(efds)
if (interactive()) {
  viz(pca.all, color_aes = "indication", shape_aes = "sample_type")
  report(pca.all, color_aes = "indication", shape_aes = "sample_type")
}


# This works on "normal" DGELists, too. -----------------------------------
pca.dgelist <- efds \%>\%
  filter_samples(indication == "CRC") \%>\%
  as.DGEList() \%>\%
  fpca()
if (interactive()) {
  report(pca.dgelist, color_aes = "sample_type")
}
}
