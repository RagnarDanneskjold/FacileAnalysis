% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fpca-compare.R, R/fpca.R
\name{compare.FacilePcaAnalysisResult}
\alias{compare.FacilePcaAnalysisResult}
\alias{fpca}
\alias{fpca.facile_frame}
\alias{fpca.matrix}
\title{Runs a principal components analysis, the facile way.}
\usage{
\method{compare}{FacilePcaAnalysisResult}(x, y, run_all = TRUE, rerun = TRUE, ...)

fpca(
  x,
  assay_name = NULL,
  dims = 5,
  features = NULL,
  filter = "default",
  ntop = 1000,
  row_covariates = NULL,
  col_covariates = NULL,
  batch = NULL,
  main = NULL,
  ...
)

\method{fpca}{facile_frame}(
  x,
  assay_name = NULL,
  dims = min(5, nrow(collect(x, n = Inf)) - 1L),
  features = NULL,
  filter = "default",
  ntop = 1000,
  row_covariates = NULL,
  col_covariates = NULL,
  batch = NULL,
  main = NULL,
  custom_key = Sys.getenv("USER"),
  ...
)

\method{fpca}{matrix}(
  x,
  dims = min(5, ncol(x) - 1L),
  features = NULL,
  filter = "default",
  ntop = 1000,
  row_covariates = NULL,
  col_covariates = NULL,
  batch = NULL,
  main = NULL,
  use_irlba = dims < 7,
  center = TRUE,
  scale. = FALSE,
  ...
)
}
\arguments{
\item{x}{a facile data container (FacileDataSet), or a \code{facile_frame}
(refer to the FacileDataStore (facile_frame) section.}

\item{rerun}{when \code{rerun = TRUE} (default), the \code{fpca(x)} and \code{fpca(y)} will
be rerun over the union of the features in \code{x} and \code{y}.}

\item{assay_name}{the name of the assay to extract data from to perform the
PCA. If not specified, default assays are taken for each type of assay
container (ie. \verb{default_assay(facile container)}, \code{"counts"} for a
\code{DGEList}, \code{assayNames(SummarizedExperiment)[1L]}, etc.)}

\item{dims}{the number of PC's to calculate (minimum is 3).}

\item{features}{A feature descriptor of the features to use for the analysis.
If \code{NULL} (default), then the specified \code{filter} strategy is used.}

\item{filter}{A strategy used to identify which features to use for the
dimensionality reduction. The current (and only choice) is \code{"default"},
which takes the \code{ntop} features, sorted be decreasing variance.}

\item{ntop}{the number of features (genes) to include in the PCA. Genes are
ranked by decreasing variance across the samples in \code{x}.}

\item{row_covariates, col_covariates}{data.frames that provie meta information
for the features (rows) and samples (columns). The default is to get
these values from "the obvious places" given \code{x} (\verb{$genes} and \verb{$samples}
for a DGEList, or the sample and feature-level covariate database tables
from a FacileDataSet, for example).}

\item{batch, main}{specify the covariates to use for batch effect removal.
Refer to the \code{\link[FacileData:remove_batch_effect]{FacileData::remove_batch_effect()}} help for more information.}
}
\value{
an fpca result
}
\description{
Performs a principal components analysis over a specified assay from the
(subset of) samples in a FacileDataStore.
}
\details{
The \code{FacilePcaAnalysisResult} produced here can be used in "the usual" ways,
ie. can be \code{viz}-ualized. \code{shine()} is 1/4th-implemented, and \code{report()}
has not been worked on yet.

Importantly / interestingly, you can shoot this result into \code{\link[=ffsea]{ffsea()}} to
perform gene set enrichment analysis over a specified dimension to identify
functional categories loaded onto differend PCs.
}
\section{Comparing PCA Results}{

We can compare two PCA results. Currently this just means we compare the
loadings of the features along each PC from fpca result \code{x} and \code{y}.
}

\section{Development Notes}{

Follow progress on implementation of \code{shine()} and \code{report()} below:
\enumerate{
\item \href{https://github.com/facileverse/FacileAnalysis/issues/12}{Implement \code{report()}}
}

Note that there are methods defined for other assay containers, like an
\code{edgeR::DGEList}, \code{limma::EList}, and \code{SummarizedExperiment}. If these are
called directly, their downstream use within the facile ecosystem isn't
yet fully supported. Development of the
\href{https://github.com/facileverse/FacileBioc}{FacileBioc package}
will address this.
}

\section{Random Things to elaborate on}{

The code here is largely inspired by DESeq2's plotPCA.

You should look at factominer:
\itemize{
\item http://factominer.free.fr/factomethods/index.html
\item http://factominer.free.fr/graphs/factoshiny.html
}
}

\section{Teaching and Tutorials}{


This looks like a useful tutorial to use when explaining the utility of
PCA analysis:
http://alexhwilliams.info/itsneuronalblog/2016/03/27/pca/

High-Dimensional Data Analysis course by Rafa Irizarry and Michael Love
https://online-learning.harvard.edu/course/data-analysis-life-sciences-4-high-dimensional-data-analysis?category[]=84&sort_by=date_added&cost[]=free
}

\section{FacileDataStore (facile_frame)}{

We enable the user to supply extra sample covariates that are not found
in the FacileDataStore associated with these samples \code{x} by adding them as
extra columns to \code{x}.

If manually provioded col_covariates have the same name as internal sample
covariates, then the manually provided ones will supersede the internals.
}

\examples{
efds <- FacileData::exampleFacileDataSet()
p1 <- efds \%>\%
  FacileData::filter_samples(indication == "CRC") \%>\%
  fpca()
p2 <- efds \%>\%
  FacileData::filter_samples(indication == "BLCA") \%>\%
  fpca()
pcmp <- compare(p1, p2)
efds <- FacileData::exampleFacileDataSet()

# A subset of samples ------------------------------------------------------
pca.crc <- efds \%>\%
  FacileData::filter_samples(indication == "CRC") \%>\%
  fpca()
if (interactive()) {
  # report(pca.crc, color_aes = "sample_type")
  shine(pca.crc)
  viz(pca.crc, color_aes = "sex")
}

# Same PCA as above, but regress "sex" out of samples first.
pca.crcs <- samples(pca.crc) \%>\%
  fpca(batch = "sex")
if (interactive()) {
  viz(pca.crcs, color_aes = "sex")
}

pca.gdb <- pca.crc \%>\%
  signature(dims = 1:3) \%>\%
  result() \%>\%
  multiGSEA::GeneSetDb()

# All samples --------------------------------------------------------------
pca.all <- fpca(efds)
if (interactive()) {
  viz(pca.all, color_aes = "indication", shape_aes = "sample_type")
  # report(pca.all, color_aes = "indication", shape_aes = "sample_type")
}


# This works on "normal" DGELists, too. -----------------------------------
pca.dgelist <- efds \%>\%
  filter_samples(indication == "CRC") \%>\%
  as.DGEList() \%>\%
  fpca()
if (interactive()) {
  report(pca.dgelist, color_aes = "sample_type")
}
}
