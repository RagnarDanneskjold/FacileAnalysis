% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fdge_model_def.R
\name{fdge_model_def}
\alias{fdge_model_def}
\alias{fdge_model_def.data.frame}
\alias{fdge_model_def.tbl}
\alias{fdge_model_def.facile_frame}
\alias{fdge_model_def.FacileDataStore}
\alias{fdge_model_def.ReactiveFacileDataStore}
\title{Builds (simple) design and contrast matrices for use with \code{\link[=fdge]{fdge()}}}
\usage{
fdge_model_def(x, covariate, numer = NULL, denom = NULL,
  fixed = NULL, on_missing = c("warning", "error"), ...)

\method{fdge_model_def}{data.frame}(x, covariate, numer = NULL,
  denom = NULL, fixed = NULL, on_missing = c("warning", "error"),
  ..., contrast. = NULL, .fds = NULL)

\method{fdge_model_def}{tbl}(x, covariate, numer = NULL, denom = NULL,
  fixed = NULL, on_missing = c("warning", "error"), ...)

\method{fdge_model_def}{facile_frame}(x, covariate, numer = NULL,
  denom = NULL, fixed = NULL, on_missing = c("warning", "error"),
  ..., custom_key = NULL)

\method{fdge_model_def}{FacileDataStore}(x, covariate, numer = NULL,
  denom = NULL, fixed = NULL, on_missing = c("warning", "error"),
  ..., samples = NULL, custom_key = NULL)

\method{fdge_model_def}{ReactiveFacileDataStore}(x, covariate,
  numer = NULL, denom = NULL, fixed = NULL,
  on_missing = c("warning", "error"), ..., samples = active_samples(x),
  custom_key = user(x))
}
\arguments{
\item{x}{a dataset}

\item{covariate}{the name of the "main effect" sample_covariate we are
performing a contrast against.}

\item{numer}{character vector defining the covariate/groups that
make up the numerator}

\item{denom}{character vector defining the covariate/groups that
make up the denominator}

\item{fixed}{character vector defining the covariate/groups to
use as fixed effects}

\item{on_missing}{when a covariate level is missing (NA) for a sample, the
setting of this parameter (default \code{"warn"}) will dictate the behavior
of this funciton. When \code{"warning"}, a warning will be raised, and the
message will be stored in the \code{$warning} element of the resul. Otherwise,
when \code{"error"}. See the "Missing Covariates" section for more information.}

\item{contrast.}{A custom contrast vector can be passed in for extra tricky
comparisons that we haven't figured out how to put a GUI in front of.}
}
\value{
a list with:
\itemize{
\item \code{$test}: "ttest" or "anova"
\item \code{$covariates}: the pData over the samples (datset,sample_id, ...)
\item \code{$design}: the design matrix (always 0-intercept)
\item \code{$contrast}: the contrast vector that defines the comparison asked for
\item \code{$messages}: A character vector of messages generated
\item \code{$warnings}: A character vector of warnings generated
\item \code{$errors}: A character vector of errors generated
}
}
\description{
This simplifies the design and contrast building process by allowing for
simple model definitions that are, essentially, functions of a single
covariate. More elaborate models can be analysed, but the user is left to
define the design, coef / contrast to test manually and pass those into
\code{\link[=fdge]{fdge()}}.
}
\details{
Note: actually a (likely) small modification of this can have it support the
"ratio of ratios" model setup.
}
\section{Missing Covariates}{

Given the "ragged" nature of sample annotations in a FacileDataStore, some
samples may have NA's as their values for the covariates under test. In this
case. In this case, if \code{on_missing} is set to "error", an error will be
thrown, otherwise a message will be set in the \code{warning} list element.

The samples that the differential expression should be run on will be
enumerated by the \code{(dataset,sample_id)} pair in the \code{result$covariates}
tibble.
}

\section{data.frame}{

The \code{*.data.frame} function definition assumes that \code{x} is a data.frame of
samples (dataset,sample_id) and the covariates defined on these samples
(ie. all the other columns of \code{x}) contain a superset of the variable names
used in the construction of the design matrix for the model definition.
}

\section{facile_frame}{

When we define a model off of a facile_frame, we expect this to look like
a wide covariate table. This defines the samples we will build a model on
in its (datset, sample_id) columns, as well as any covaraites defined on
these samples.

If there are covariates used in the \code{covariate} or \code{fixed} parameters that
are not found in \code{colnames(x)}, we will attempt to retrieve them from the
FacileDataStore \code{fds(x)}. If they cannot be found, this function will raise
an error.
}

\examples{
efds <- FacileData::exampleFacileDataSet()

# Look for tumor vs normal differences, controling for stage and sex
model_info <- efds \%>\%
  filter_samples(indication == "BLCA") \%>\%
  fdge_model_def(covariate = "sample_type",
                 numer = "tumor",
                 denom = "normal",
                 fixed = "sex")
m2 <- efds \%>\%
  filter_samples(indication == "BLCA") \%>\%
  fdge_model_def(covariate = "sample_type",
                 numer = "tumor",
                 denom = "normal",
                 fixed = c("sex", "stage"))

# stageIV vs stageII & stageIII
m3 <- efds \%>\%
  filter_samples(indication == "BLCA", sample_type == "tumor") \%>\%
  fdge_model_def(covariate = "stage", numer = "IV", denom = c("II", "III"),
                 fixed = "sex")

# Incomplete ttest to help with custom contrast vector
mi <- efds \%>\%
  filter_samples(indication == "BLCA", sample_type == "tumor") \%>\%
  fdge_model_def(covariate = "stage", fixed = "sex", contrast. = "help")

# ANOVA across stage in BLCA, control for sex
m3 <- efds \%>\%
  filter_samples(indication == "BLCA") \%>\%
  fdge_model_def(covariate = "stage", fixed = "sex")
}
